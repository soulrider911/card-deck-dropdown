{"version":3,"sources":["style.scss","_reset","../bower_components/susy/sass/susy/language/susy/_box-sizing.scss","../bower_components/susy/sass/susy/output/support/_rem.scss","_colors.scss","../bower_components/susy/sass/susy/language/susy/_container.scss","../bower_components/susy/sass/susy/output/support/_clearfix.scss","../bower_components/compass-breakpoint/stylesheets/_breakpoint.scss","../bower_components/susy/sass/susy/language/susy/_span.scss","../bower_components/susy/sass/susy/output/shared/_direction.scss","../bower_components/susy/sass/susy/language/susy/_gutters.scss","style.css"],"names":[],"mappings":"AAIA,iFAAY;ACH2d;EACne,UAAU;EACV,WAAW;EACX,UAAU;EACV,gBAAgB;EAChB,cAAc;EACd,yBAAyB;CANid;;AAU5Z;EAC9E,eAAe;CADwE;;AAGzF;EACE,eAAe;CADX;;AAGF;EACF,iBAAiB;CADX;;AAGI;EACV,aAAa;CADA;;AAIF;EACT,YAAY;EACZ,cAAc;CAFG;;AAMR;EACT,YAAY;EACZ,cAAc;CAFG;;AAKrB;EACE,0BAA0B;EAC1B,kBAAkB;CAFb;;ACfS;ECDd,uBDemC;CAdb;;AFCtB;EACF,iBAAiB;EACjB,qBAAqB;CAFhB;;AAIP;EACE,gBAAgB;EAChB,qBAAqB;CAFpB;;AAIH;EACE,kBAAiB;CADhB;;AAGH;EACI,iBAAgB;EAChB,gBAAgB;EAChB,iBAAiB;EACjB,sBAAsB;CAJxB;;AAMF;EACE,sBAAsB;EACtB,eIhCwB;EJiCxB,8BAA4B;CAH5B;;AAIC;EACC,eAAa;CADP;;AAIV;EACE,gBAAgB;CADd;;AAOJ;EACE,2CAA2C;EAC3C,iBAAiB;EACjB,cAAc;CAHX;;AAKL;EGvCI,iBHXc;EGWd,kBEqDoC;EFrDpC,mBEqDmE;CLd5D;;AM/CN;EACC,aAAa;EACb,eAAe;EACf,YAAY;CAHL;;ANmDP;EACJ,YAAY;EACZ,oBAAoB;EACpB,0BIrCY;EJsCZ,mBAAkB;CAJD;;AAKjB;EACE,iBAAiB;EACjB,gBAAgB;CAFZ;;AAIN;EACE,iBAAiB;EACjB,aAAa;EACb,mBAAmB;CAHnB;;AAKF;EACE,aAAa;CADX;;AAEF;EACE,sBAAsB;EACtB,eIpDQ;EJqDR,eAAc;CAHd;;AAIC;EACC,2BAA2B;CADrB;;AOlBV;EPyBJ;IGtEI,iBKwIoB;ILxIpB,YMA4D;INA5D,uBO4DwB;GVUvB;CWiDJ;;AX5CC;EACE,8BAA8B;EAC9B,gBAAgB;CAFV;;AAGL;EACC,eAAc;CADF;;AAGd;EACE,YAAY;EACZ,iBAAiB;CAFZ;;AAGL;EACE,eAAe;EACf,+BIzEa;EJ0Eb,iBAAiB;CAHd;;AOvCP;EP6CI;IACE,sBAAsB;IACtB,aAAa;IACb,iCIhFW;IJiFX,eAAc;IACd,mBAAmB;IACnB,iBAAiB;GANd;EAOF;IACC,aAAa;GADF;CWwDtB;;AXhDD;EACE,0BIjGY;EJkGZ,mBAAmB;EACnB,cAAc;CAHV;;AO5DF;EP4DJ;IGzGI,iBKwIoB;ILxIpB,aMAuE;INAvE,gBKkFoB;GRuBlB;CW8DL;;AXtDC;EACE,sBAAsB;CADhB;;AAEN;EACE,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;EAChB,0BAA0B;EAC1B,oBAAoB;EACpB,iCAAiC;CANhC;;AAQG;EACJ,gCAAW;EACX,eAAe;EACf,eAAe;CAHT;;AAIL;EACC,gCAAW;CADL;;AAIV;EACE,iBAAiB;EACjB,gBAAgB;EAChB,iBAAiB;EACjB,gCAAW;CAJX;;AASA;EACJ,YAAY;EACZ,mBAAmB;EACnB,kBAAkB;EAClB,gBAAgB;CAJC","file":"style.css","sourcesContent":["@import \"reset\";\n@import \"colors\";\n@import '../bower_components/susy/sass/_susy';\n@import '../bower_components/compass-breakpoint/stylesheets/_breakpoint';\n@import url(https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300,600);\n\n//Susy\n$susy: (\n  container: 960px,\n  columns: 12,\n  gutters: 1/4,\n  global-box-sizing: border-box\n);\n@include border-box-sizing;\n\n//establish Breakpoints\n$desktop: 600px;\n\n// ////////////////////////////////////////////\n// Text & General\n// ////////////////////////////////////////////\nh2, h3{\n  font-weight: 600;\n  margin-bottom: .5rem;\n}\nh2{\n  font-size: 2rem;\n  margin-bottom: .5rem;\n}\nh3{\n  font-size:1.2rem;\n}\np{\n    line-height:1.5;\n    font-size: 18px;\n    font-weight: 300;\n    margin-bottom: 1.5rem;\n}\na{\n  text-decoration: none;\n  color: $flat-peter-river;\n  transition: color .3s linear;\n  &:hover{\n    color: darken($flat-peter-river, 10%);\n  }\n}\nimg{\n  max-width: 100%;\n}\n\n// ////////////////////////////////////////////\n// Main Sections\n// ////////////////////////////////////////////\nbody{\n  font-family: 'Source Sans Pro', sans-serif;\n  font-weight: 400;\n  padding: 20px;\n}\n.container{\n  @include container;\n}\n\nheader.site-header{\n  color: #fff;\n  margin-bottom: 2rem;\n  background-color: $gulp;\n  padding: 1rem 3rem;\n  #logo{\n    font-weight: 300;\n    font-size: 24px;\n  }\n  p{\n    margin-bottom: 0;\n    color: green;\n    background: purple;\n  }\n  nav{\n    float: right;\n    a{\n      text-decoration: none;\n      color: $gulp;\n      padding: 0 5px;\n      &:hover{\n        text-decoration: underline;\n      }\n    }\n  }\n}\n\nmain{\n  @include breakpoint($desktop) {\n    @include span(8);\n  }\n\n  article{\n    border-bottom: 1px solid #ddd;\n    padding: 2rem 0;\n    &:first-child{\n      padding-top:0;\n    }\n    footer{\n      color: #555;\n      font-weight: 300;\n      span{\n        display: block;\n        border-top: 1px dotted $flat-silver;\n        line-height: 2.5;\n      }\n      @include breakpoint($desktop){\n        span{\n          display: inline-block;\n          border: none;\n          border-right: 1px dotted $flat-silver;\n          padding: 0 8px;\n          margin-right: -4px;\n          line-height: 1.5;\n          &:last-child{\n            border: none;\n          }\n        }\n      }\n    }\n  }\n}\naside{\n  background-color: $gulp;\n  border-radius: 2px;\n  padding: 20px;\n  @include breakpoint($desktop) {\n    @include span(4 last);\n  }\n\n  .widget{\n    margin-bottom: 1.5rem;\n    h3{\n      color: #fff;\n      font-weight: 400;\n      font-size: 1rem;\n      text-transform: uppercase;\n      padding-bottom: 8px;\n      border-bottom: 1px solid #fafafa;\n    }\n    ul li a{\n      color: rgba(255,255,255,.5);\n      padding: 4px 0;\n      display: block;\n      &:hover{\n        color: rgba(255,255,255,.8);\n      }\n    }\n    p{\n      font-weight: 400;\n      font-size: 1rem;\n      line-height: 1.5;\n      color: rgba(255,255,255,.7);\n    }\n  }\n}\n\nfooter.site-footer{\n  clear: both;\n  text-align: center;\n  font-size: .75rem;\n  padding: 10px 0;\n}\n","@mixin meyer-reset {\n  html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  // HTML5 display-role reset for older browsers\n  article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote {\n    &:before, &:after {\n      content: \"\";\n      content: none;\n    }\n  }\n  q {\n    &:before, &:after {\n      content: \"\";\n      content: none;\n    }\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n}\n\n@include meyer-reset;\n","// Susy Box Sizing\n// =================\n\n// Global Box Sizing\n// -----------------\n// Set a box model globally on all elements.\n// - [$box]: border-box | content-box\n// - [$inherit]: true | false\n@mixin global-box-sizing(\n  $box: susy-get(global-box-sizing),\n  $inherit: false\n) {\n  $inspect: $box;\n\n  @if $inherit {\n    @at-root {\n       html { @include output((box-sizing: $box)); }\n       *, *:before, *:after { box-sizing: inherit; }\n     }\n  } @else {\n    *, *:before, *:after { @include output((box-sizing: $box)); }\n  }\n\n  @include susy-inspect(global-box-sizing, $inspect);\n  @include update-box-model($box);\n}\n\n// Border Box Sizing\n// -----------------\n// A legacy shortcut...\n// - [$inherit]: true | false\n@mixin border-box-sizing(\n  $inherit: false\n) {\n  @include global-box-sizing(border-box, $inherit);\n}\n\n// Update Box Model\n// ----------------\n// PRIVATE: Updates global box model setting\n@mixin update-box-model(\n  $box\n) {\n  @if $box != susy-get(global-box-sizing) {\n  @include susy-set(global-box-sizing, $box);\n  }\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","\n// Greens\n$flat-turquoise: #1ABC9C;\n$flat-green-sea: #16A085;\n$flat-emerald: #2ECC71;\n$flat-nephritis: #27AE60;\n\n// Blues\n$flat-peter-river: #3498DB;\n$flat-belize-hole: #2980B9;\n$flat-wet-asphalt: #34495E;\n$flat-midnight-blue: #2C3E50;\n\n// Purples\n$flat-amethyst: #9B59B6;\n$flat-wisteria: #8E44AD;\n\n// Yellows\n$flat-sunflower: #F1C40F;\n\n// Oranges\n$flat-orange: #F39C12;\n$flat-carrot: #E67E22;\n$flat-pumpkin: #D35400;\n\n// Reds\n$flat-alizarin: #E74C3C;\n$flat-pomegranate: #C0392B;\n$gulp: #CF4646;\n\n// Grays\n$flat-clouds: #ECF0F1;\n$flat-silver: #BDC3C7;\n$flat-concrete: #95A5A6;\n$flat-asbestos: #7F8C8D;\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","@import url(https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300,600);\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol, ul {\n  list-style: none;\n}\n\nblockquote, q {\n  quotes: none;\n}\n\nblockquote:before, blockquote:after {\n  content: \"\";\n  content: none;\n}\n\nq:before, q:after {\n  content: \"\";\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n*, *:before, *:after {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\nh2, h3 {\n  font-weight: 600;\n  margin-bottom: .5rem;\n}\n\nh2 {\n  font-size: 2rem;\n  margin-bottom: .5rem;\n}\n\nh3 {\n  font-size: 1.2rem;\n}\n\np {\n  line-height: 1.5;\n  font-size: 18px;\n  font-weight: 300;\n  margin-bottom: 1.5rem;\n}\n\na {\n  text-decoration: none;\n  color: #3498DB;\n  transition: color 0.3s linear;\n}\n\na:hover {\n  color: #217dbb;\n}\n\nimg {\n  max-width: 100%;\n}\n\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  font-weight: 400;\n  padding: 20px;\n}\n\n.container {\n  max-width: 960px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.container:after {\n  content: \" \";\n  display: block;\n  clear: both;\n}\n\nheader.site-header {\n  color: #fff;\n  margin-bottom: 2rem;\n  background-color: #CF4646;\n  padding: 1rem 3rem;\n}\n\nheader.site-header #logo {\n  font-weight: 300;\n  font-size: 24px;\n}\n\nheader.site-header p {\n  margin-bottom: 0;\n  color: green;\n  background: purple;\n}\n\nheader.site-header nav {\n  float: right;\n}\n\nheader.site-header nav a {\n  text-decoration: none;\n  color: #CF4646;\n  padding: 0 5px;\n}\n\nheader.site-header nav a:hover {\n  text-decoration: underline;\n}\n\n@media (min-width: 600px) {\n  main {\n    width: 66.10169%;\n    float: left;\n    margin-right: 1.69492%;\n  }\n}\n\nmain article {\n  border-bottom: 1px solid #ddd;\n  padding: 2rem 0;\n}\n\nmain article:first-child {\n  padding-top: 0;\n}\n\nmain article footer {\n  color: #555;\n  font-weight: 300;\n}\n\nmain article footer span {\n  display: block;\n  border-top: 1px dotted #BDC3C7;\n  line-height: 2.5;\n}\n\n@media (min-width: 600px) {\n  main article footer span {\n    display: inline-block;\n    border: none;\n    border-right: 1px dotted #BDC3C7;\n    padding: 0 8px;\n    margin-right: -4px;\n    line-height: 1.5;\n  }\n  main article footer span:last-child {\n    border: none;\n  }\n}\n\naside {\n  background-color: #CF4646;\n  border-radius: 2px;\n  padding: 20px;\n}\n\n@media (min-width: 600px) {\n  aside {\n    width: 32.20339%;\n    float: right;\n    margin-right: 0;\n  }\n}\n\naside .widget {\n  margin-bottom: 1.5rem;\n}\n\naside .widget h3 {\n  color: #fff;\n  font-weight: 400;\n  font-size: 1rem;\n  text-transform: uppercase;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #fafafa;\n}\n\naside .widget ul li a {\n  color: rgba(255, 255, 255, 0.5);\n  padding: 4px 0;\n  display: block;\n}\n\naside .widget ul li a:hover {\n  color: rgba(255, 255, 255, 0.8);\n}\n\naside .widget p {\n  font-weight: 400;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: rgba(255, 255, 255, 0.7);\n}\n\nfooter.site-footer {\n  clear: both;\n  text-align: center;\n  font-size: .75rem;\n  padding: 10px 0;\n}\n"],"sourceRoot":"/source/"}